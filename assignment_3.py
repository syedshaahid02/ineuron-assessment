# -*- coding: utf-8 -*-
"""Assignment-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qi0o3eBMIEcAJVf9BcBvtYiHIu6mzYd3
"""

#1
def threeSumClosest(nums, target):
    nums.sort()
    closestSum = float('inf')

    for i in range(len(nums) - 2):
        left = i + 1
        right = len(nums) - 1

        while left < right:
            currSum = nums[i] + nums[left] + nums[right]
            if currSum == target:
                return target

            if abs(currSum - target) < abs(closestSum - target):
                closestSum = currSum

            if currSum > target:
                right -= 1
            else:
                left += 1

    return closestSum

nums = [-1, 2, 1, -4]
target = 1

result = threeSumClosest(nums, target)
print(result)

#2
def fourSum(nums, target):
    nums.sort()
    result = []

    for i in range(len(nums) - 3):
        if i > 0 and nums[i] == nums[i - 1]:
            continue

        for j in range(i + 1, len(nums) - 2):
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue

            left = j + 1
            right = len(nums) - 1

            while left < right:
                currSum = nums[i] + nums[j] + nums[left] + nums[right]

                if currSum == target:
                    result.append([nums[i], nums[j], nums[left], nums[right]])
                    left += 1
                    right -= 1

                    while left < right and nums[left] == nums[left - 1]:
                        left += 1

                    while left < right and nums[right] == nums[right + 1]:
                        right -= 1

                elif currSum < target:
                    left += 1
                else:
                    right -= 1

    return result

nums = [1, 0, -1, 0, -2, 2]
target = 0

result = fourSum(nums, target)
print(result)

#3
def nextPermutation(nums):
    n = len(nums)
    i = n - 2


    while i >= 0 and nums[i] >= nums[i+1]:
        i -= 1

    if i >= 0:
        j = n - 1

        while j > i and nums[j] <= nums[i]:
            j -= 1

        nums[i], nums[j] = nums[j], nums[i]


    left = i + 1
    right = n - 1
    while left < right:
        nums[left], nums[right] = nums[right], nums[left]
        left += 1
        right -= 1

    return nums

nums = [1, 2, 3]
result = nextPermutation(nums)
print(result)

#4
def searchInsert(nums, target):
    left = 0
    right = len(nums) - 1

    while left <= right:
        mid = (left + right) // 2

        if nums[mid] == target:
            return mid
        elif nums[mid] > target:
            right = mid - 1
        else:
            left = mid + 1

    return left

nums = [1, 3, 5, 6]
target = 5

result = searchInsert(nums, target)
print(result)

#5
def plusOne(digits):
    carry = 1

    for i in range(len(digits) - 1, -1, -1):
        digits[i] += carry
        carry = digits[i] // 10
        digits[i] %= 10

        if carry == 0:
            break

    if carry == 1:
        digits.insert(0, 1)

    return digits

digits = [1, 2, 3]
result = plusOne(digits)
print(result)

#6
def singleNumber(nums):
    result = 0
    for num in nums:
        result ^= num
    return result

nums = [2, 2, 1]
result = singleNumber(nums)
print(result)

#7
def findMissingRanges(nums, lower, upper):
    start = lower
    result = []

    for num in nums:
        if num > start:
            if num - 1 == start:
                start = num
            else:
                result.append([start, num - 1])
                start = num + 1

    if start <= upper:
        result.append([start, upper])

    return result

nums = [0, 1, 3, 50, 75]
lower = 0
upper = 99

result = findMissingRanges(nums, lower, upper)
print(result)

#8
def canAttendMeetings(intervals):
    intervals.sort(key=lambda x: x[0])

    for i in range(1, len(intervals)):
        if intervals[i][0] < intervals[i-1][1]:
            return False

    return True

intervals = [[0, 30], [5, 10], [15, 20]]
result = canAttendMeetings(intervals)
print(result)