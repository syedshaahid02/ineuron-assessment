# -*- coding: utf-8 -*-
"""assignment-7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ud0BMFvmHsgNRBlFDsKnkApSBHN-z1_f
"""

#1
def areIsomorphic(s, t):
    charCount = dict()
    c = "a"
    for i in range(len(s)):
        if s[i] in charCount:
            c = charCount[s[i]]
            if c != t[i]:
                return False
        elif t[i] not in charCount.values():
            charCount[s[i]] = t[i]
        else:
            return False
    return True
 
 
# Driver Code
s = "egg"
t = "add"
 
# Function Call
if (len(s) == len(t) and areIsomorphic(s, t)):
    print("True")
else:
    print("False")

#2
def is_strobogrammatic(num):
    mapping = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}
    left, right = 0, len(num) - 1
    
    while left <= right:
        if num[left] not in mapping or mapping[num[left]] != num[right]:
            return False
        left += 1
        right -= 1
    
    return True
num = "69"
print(is_strobogrammatic(num))

#3
def addStrings(num1, num2):
    i, j = len(num1) - 1, len(num2) - 1
    carry = 0
    result = ""
    
    while i >= 0 or j >= 0 or carry != 0:
        digit1 = int(num1[i]) if i >= 0 else 0
        digit2 = int(num2[j]) if j >= 0 else 0
        total = digit1 + digit2 + carry
        result = str(total % 10) + result
        carry = total // 10
        i -= 1
        j -= 1
    
    return result

num1 = "11"
num2 = "123"
print(addStrings(num1, num2))

#4
def reverseWords(s):
    words = s.split()
    reversed_words = [word[::-1] for word in words]
    reversed_sentence = ' '.join(reversed_words)
    return reversed_sentence

s = "Let's take LeetCode contest"
print(reverseWords(s))

#5
def reverseStr(s, k):
    chars = list(s)
    n = len(chars)
    
    for i in range(0, n, 2 * k):
        chars[i:i+k] = reversed(chars[i:i+k])
    
    return ''.join(chars)

s = "abcdefg"
k = 2
print(reverseStr(s, k))

#6
def rotateString(s, goal):
    if len(s) != len(goal):
        return False
    
    concat = s + s
    return goal in concat
s = "abcde"
goal = "cdeab"
print(rotateString(s, goal))

#7
def buildString(string):
    stack = []
    for c in string:
        if c != '#':
            stack.append(c)
        elif stack:
            stack.pop()
    return ''.join(stack)

def backspaceCompare(s, t):
    return buildString(s) == buildString(t)

s = "ab#c"
t = "ad#c"
print(backspaceCompare(s, t))

