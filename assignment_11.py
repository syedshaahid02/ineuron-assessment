# -*- coding: utf-8 -*-
"""Assignment-11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KbfJIM1Sy6oL_NK0ajFY5CiXsikrdkjn
"""

#1
def mySqrt(x):
    if x == 0 or x == 1:
        return x

    left = 0
    right = x

    while left <= right:
        mid = (left + right) // 2

        if mid * mid <= x:
            left = mid + 1
        else:
            right = mid - 1

    return right

x = 4
result = mySqrt(x)
print(result)

#2
def findPeakElement(nums):
    left = 0
    right = len(nums) - 1

    while left < right:
        mid = (left + right) // 2

        if nums[mid] > nums[mid + 1] and nums[mid] > nums[mid - 1]:
            return mid
        elif nums[mid - 1] > nums[mid]:
            right = mid - 1
        else:
            left = mid + 1

    return left

nums = [1, 2, 1, 3, 5, 6, 4]
result = findPeakElement(nums)
print(result)

#3
def missingNumber(nums):
    n = len(nums)
    missing = n

    for i, num in enumerate(nums):
        missing ^= i ^ num

    return missing

nums = [3, 0, 1]
result = missingNumber(nums)
print(result)

#4
def findDuplicate(nums):
    slow = nums[0]
    fast = nums[0]

    # Find the intersection point
    while True:
        slow = nums[slow]
        fast = nums[nums[fast]]
        if slow == fast:
            break

    # Find the starting point of the cycle
    slow = nums[0]
    while slow != fast:
        slow = nums[slow]
        fast = nums[fast]

    return slow

nums = [1, 3, 4, 2, 2]
result = findDuplicate(nums)
print(result)

#5
def intersection(nums1, nums2):
    set1 = set(nums1)
    intersection = []

    for num in nums2:
        if num in set1 and num not in intersection:
            intersection.append(num)

    return intersection

nums1 = [1, 2, 2, 1]
nums2 = [2, 2]
result = intersection(nums1, nums2)
print(result)

#6
def findMin(nums):
    left = 0
    right = len(nums) - 1

    while left < right:
        mid = left + (right - left) // 2

        if nums[mid] > nums[right]:
            left = mid + 1
        else:
            right = mid

    return nums[left]

nums = [3, 4, 5, 1, 2]
result = findMin(nums)
print(result)

#7
def searchRange(nums, target):
    left = 0
    right = len(nums) - 1

    while left <= right:
        mid = left + (right - left) // 2

        if nums[mid] == target:
            right = mid - 1
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    if left > len(nums) - 1 or nums[left] != target:
        return [-1, -1]

    right = len(nums) - 1

    while left <= right:
        mid = left + (right - left) // 2

        if nums[mid] == target:
            left = mid + 1
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return [left, right]

#8
from collections import Counter

def intersect(nums1, nums2):
    counter1 = Counter(nums1)
    result = []

    for num in nums2:
        if num in counter1 and counter1[num] > 0:
            result.append(num)
            counter1[num] -= 1

    return result

nums1 = [1, 2, 2, 1]
nums2 = [2, 2]
intersection = intersect(nums1, nums2)
print(intersection)  # Output: [2, 2]